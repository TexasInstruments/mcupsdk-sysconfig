%%{
    let common = system.getScript("/common");
    let pru_module = system.modules[args[0]];
    let r5f_core   = pru_module.$instances[0].r5fCore
    let r5f_module = null;
    if(_.keys(system.contexts).includes(r5f_core))
    {
        r5f_module     = system.contexts[r5f_core].system.modules['/pru_io/pru_ipc/pru_ipc'];
        let icss0_intc = system.contexts[r5f_core].system.modules['/drivers/pruicss/icss_intc/icss0_intc_mapping'];
        let icss1_intc = system.contexts[r5f_core].system.modules['/drivers/pruicss/icss_intc/icss1_intc_mapping'];
    }
    /**
     * @brief Event Value for PRU
     *
     *  Simultaneously writing a ‘1’ to pru<n>_r31_vec_valid (R31 bit 5) and a channel number from 0
     *  to 15 to pru<n>_r31_vec[3:0] (R31 bits 3-0) creates a pulse on the output of the corresponding
     *  pr<k>_pru_mst_intr[x]_intr_req INTC system event.
     */
    function getEventValue(instance, dir) {
        if(dir === "rx")
            return  0x0020 + parseInt(instance.rxIntcMapping?.event) - 16;
        if(dir === "tx")
            return  0x0020 + parseInt(instance.txIntcMapping?.event) - 16;
    }

    let instancesOffsets = {
        ICSSG0: {
            PRU0: {
                memOffset: 0,
            },
            PRU1: {
                memOffset: 0,
            },
            RTU_PRU0: {
                memOffset: 0,
            },
            RTU_PRU1: {
                memOffset: 0,
            },
            TX_PRU0: {
                memOffset: 0,
            },
            TX_PRU1: {
                memOffset: 0,
            },
        },
        ICSSG1: {
            PRU0: {
                memOffset: 0,
            },
            PRU1: {
                memOffset: 0,
            },
            RTU_PRU0: {
                memOffset: 0,
            },
            RTU_PRU1: {
                memOffset: 0,
            },
            TX_PRU0: {
                memOffset: 0,
            },
            TX_PRU1: {
                memOffset: 0,
            },
        },
    };

    const RTU_OFFSET = 0x00001000;
    const TX_OFFSET  = 0x00001800;

    // maybe an advanced mode option to provide user options to select memName and memOffset
    function getPruConfigMemOffset (instance) {
        let offset = instancesOffsets[instance.icssInstance][instance.pruCore].memOffset;
        let memAddr = "NULL";
        if (instance.icssInstance === "ICSSG0") {
            switch(instance.pruCore) {
                case "PRU0":
                    memAddr = offset.toString(16);
                    break;
                case "PRU1":
                    memAddr = offset.toString(16);
                    break;
                case "RTU_PRU0":
                    memAddr = (RTU_OFFSET + offset).toString(16);
                    break;
                case "RTU_PRU1":
                    memAddr = (RTU_OFFSET + offset).toString(16);
                    break;
                case "TX_PRU0":
                    memAddr = (TX_OFFSET + offset).toString(16);
                    break;
                case "TX_PRU1":
                    memAddr = (TX_OFFSET + offset).toString(16);
                    break;
                default:
                    // Nothing
            }
        }
        if (instance.icssInstance === "ICSSG1") {
            switch(instance.pruCore) {
                case "PRU0":
                    memAddr = offset.toString(16);
                    break;
                case "PRU1":
                    memAddr = offset.toString(16);
                    break;
                case "RTU_PRU0":
                    memAddr = (RTU_OFFSET + offset).toString(16);
                    break;
                case "RTU_PRU1":
                    memAddr = (RTU_OFFSET + offset).toString(16);
                    break;
                case "TX_PRU0":
                    memAddr = (TX_OFFSET + offset).toString(16);
                    break;
                case "TX_PRU1":
                    memAddr = (TX_OFFSET + offset).toString(16);
                    break;
                default:
                    // Nothing
            }
        }
        instancesOffsets[instance.icssInstance][instance.pruCore].memOffset += 8 + 4*instance.noOfBuffers;
        return  memAddr;
    }

%%}

% if(r5f_module){
% for(let i = 0; i < r5f_module.$instances.length; i++) {
    % let instance = r5f_module.$instances[i];
    % if(instance.icssInstance == pru_module.getIcssInstance() && instance.pruCore == pru_module.getPruCore()){
;------------------------------------------------------------------------------
;   PRU IPC
;   Interrupt mapping for PRU IPC
;------------------------------------------------------------------------------
    .asg    0x`getPruConfigMemOffset(instance).toString(16)`,       `instance.$name`_CONFIG_MEM_OFFSET
    % if(instance.interruptRx) {
    .asg    1,          `instance.$name`_RX_INTR_ENABLE
    .asg    0x`getEventValue(instance, "rx").toString(16)`,       `instance.$name`_RX_EVENT
    % }
    % if(instance.interruptTx) {
    .asg    1,       `instance.$name`_TX_INTR_ENABLE
    .asg    0x`getEventValue(instance, "tx").toString(16)`,       `instance.$name`_TX_EVENT
    % }
    %}
% }
% }
