%%{
    // this section is for Init parts...
    let common = system.getScript('/common')
    let soc_ctrl_epwm = system.modules["/drivers/soc_ctrl/v0/subModules/soc_ctrl_epwm"];
    let soc_ctrl_epwm_scripts = system.getScript["/drivers/soc_ctrl/v0/subModules/soc_ctrl_epwm"];

    let arg = args;

    let instance = soc_ctrl_epwm.$instances[0];
    let thisCoreCxt = common.getSelfSysCfgCoreName();

    let getAddedInstances = soc_ctrl_epwm.getAddedInstances
    // let modules = soc_ctrl_adc.usedModules
    let epwmStaticConfigArray = soc_ctrl_epwm.epwmStaticConfigArray

    // console.log(adcStaticConfigArray)

    let epwmInstAdded = getAddedInstances('/drivers/epwm/epwm')

    let epwmArgStr = ""
    let epwmMask = []
    if (epwmInstAdded.length > 0){
        epwmArgStr = epwmArgStr + "("
        for (let i of epwmInstAdded){
            epwmMask.push("(1U << " + i.replace("EPWM", "") + "U)")
        }

        epwmArgStr += epwmMask.join(" | ") + ")"
    }

    let tbClkSynArgStr = ""
    if(epwmInstAdded.length > 0){
        tbClkSynArgStr = "("
        let tempArr = []
        for(let epwmInst of epwmInstAdded){
            let epwmInstNumberStr = epwmInst.replace("EPWM", "")
            if(instance["tbclkSyncCtrlEn"]){
                if(instance["tbclkSyncCtrlEn"].includes(epwmInst) && (instance["tbClkSyncDisable"+epwmInstNumberStr])){
                    continue;
                }else {
                    tempArr.push("(1U << " + epwmInst.replace("EPWM", "") + "U)")
                }
            }
        }
        tbClkSynArgStr += tempArr.join(" | ") + ")"
    }
%%}
%if(soc_ctrl_epwm)
%{
    % switch (arg[0])
    % {
    % case "header_file":

uint32_t epwmTbClkSyncDisableMask;
uint32_t epwmTbClkSyncEnableMask;
        % break;
    % case "begin":
        % /* code */
        % if(epwmArgStr != ""){
// this may be used in the application by an extern definition.
    extern uint32_t epwmTbClkSyncDisableMask;
    epwmTbClkSyncDisableMask = `epwmArgStr`;
    /* Disabling the TBCLK SYNC for the EPWM configurations */
    SOC_setMultipleEpwmTbClk(epwmTbClkSyncDisableMask, FALSE);
        % }

    /* Halt Controls for EPWM */
            % for (let opt of epwmInstAdded){
                % if(instance["haltCtrlEn"].includes(opt) && instance["haltDisable"+opt.replace("EPWM","")]){
    /* Halt Disabled for EPMW instance `opt.replace("EPWM","")`*/
    Soc_disableEPWMHalt(`opt.replace("EPWM","")`);
                % } else {
    /* Halt Enabled for EPMW instance `opt.replace("EPWM","")`*/
    Soc_enableEPWMHalt(`opt.replace("EPWM","")`);
                % }
            %}
        % break;
    % case "end":
        % /* code */
        % if((tbClkSynArgStr !== "") && (tbClkSynArgStr !== "()")){
/* Enabling the TBCLK SYNC after the EPWM configurations */
    // this may be used in the application by an extern definition.
    extern uint32_t epwmTbClkSyncEnableMask;
    epwmTbClkSyncEnableMask = `tbClkSynArgStr`;
    SOC_setMultipleEpwmTbClk(epwmTbClkSyncEnableMask, TRUE);
        % }
        % break;
    % default:
        % break;
    % }
%}